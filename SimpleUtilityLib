-- SimpleUtilityLib.lua
local SimpleUtilityLib = {}

-- Servicios de Roblox necesarios
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer

-- Función para teletransportar al jugador a una posición específica
function SimpleUtilityLib:TeleportToPosition(x, y, z)
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetPosition = Vector3.new(x, y, z)
        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
        return true, "Teletransportado a (" .. x .. ", " .. y .. ", " .. z .. ")"
    else
        return false, "No se encontró el personaje del jugador"
    end
end

-- Función para teletransportar al jugador a otro jugador
function SimpleUtilityLib:TeleportToPlayer(targetPlayerName)
    local target = nil
    for _, player in pairs(Players:GetPlayers()) do
        if player.Name:lower():find(targetPlayerName:lower()) then
            target = player
            break
        end
    end
    if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character.HumanoidRootPart.CFrame = target.Character.HumanoidRootPart.CFrame
            return true, "Teletransportado a " .. target.Name
        else
            return false, "No se encontró el personaje del jugador"
        end
    else
        return false, "Jugador no encontrado o sin personaje"
    end
end

-- Función para mostrar una notificación en pantalla
function SimpleUtilityLib:Notify(message, duration)
    duration = duration or 3 -- Duración por defecto: 3 segundos
    local success, result = pcall(function()
        local StarterGui = game:GetService("StarterGui")
        StarterGui:SetCore("SendNotification", {
            Title = "SimpleUtilityLib",
            Text = message,
            Duration = duration
        })
    end)
    if not success then
        warn("Error al mostrar notificación: " .. result)
    end
end

-- Función para obtener la lista de jugadores cercanos (en un radio)
function SimpleUtilityLib:GetNearbyPlayers(radius)
    radius = radius or 50 -- Radio por defecto: 50 studs
    local nearbyPlayers = {}
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local myPosition = LocalPlayer.Character.HumanoidRootPart.Position
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local distance = (myPosition - player.Character.HumanoidRootPart.Position).Magnitude
                if distance <= radius then
                    table.insert(nearbyPlayers, {
                        Name = player.Name,
                        Distance = math.floor(distance)
                    })
                end
            end
        end
    end
    return nearbyPlayers
end

-- Función para suavizar el movimiento del jugador (tweening)
function SimpleUtilityLib:SmoothMoveTo(x, y, z, speed)
    speed = speed or 1 -- Velocidad por defecto: 1
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local targetPosition = Vector3.new(x, y, z)
        local tweenInfo = TweenInfo.new(
            speed, -- Duración del movimiento
            Enum.EasingStyle.Linear, -- Estilo de suavizado
            Enum.EasingDirection.InOut -- Dirección
        )
        local tween = TweenService:Create(
            LocalPlayer.Character.HumanoidRootPart,
            tweenInfo,
            {CFrame = CFrame.new(targetPosition)}
        )
        tween:Play()
        return true, "Movimiento suave iniciado"
    else
        return false, "No se encontró el personaje del jugador"
    end
end

return SimpleUtilityLib
